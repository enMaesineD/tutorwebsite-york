Index: website/templates/sign_up.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"base.html\" %}\n\n{% block title %}Home{% endblock %}\n\n{% block content %}\n<form method=\"POST\">\n    <h3 style=\"text-align:center;margin-top:15px;\">Sign Up</h3>\n    <div class=\"form-group\">\n        <label for=\"email\">Email Address</label>\n        <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"Enter email\" />\n    </div>\n    <div class=\"form-group\">\n        <label for=\"firstName\">First Name</label>\n        <input type=\"text\" class=\"form-control\" id=\"firstName\" name=\"firstName\" placeholder=\"Enter first name\" />\n    </div>\n    <div class=\"form-group\">\n        <label for=\"password1\">Password</label>\n        <input type=\"password\" class=\"form-control\" id=\"password1\" name=\"password1\" placeholder=\"Enter password\" />\n    </div>\n    <div class=\"form-group\">\n        <label for=\"password2\">Confirm Password</label>\n        <input type=\"password\" class=\"form-control\" id=\"password2\" name=\"password2\" placeholder=\"Confirm password\" />\n    </div>\n<br />\n\n<h3 style=\"text-align:center;\">Are you a tutee, tutor, or admin?</h3>\n<div class=\"form-check\">\n  <input class=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios1\" value=\"option1\" checked>\n  <label class=\"form-check-label\" for=\"exampleRadios1\">\n    Tutee\n  </label>\n</div>\n<div class=\"form-check\">\n  <input class=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios2\" value=\"option2\">\n  <label class=\"form-check-label\" for=\"exampleRadios2\">\n    Tutor\n  </label>\n</div>\n<div class=\"form-check\">\n  <input class=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios3\" value=\"option3\">\n  <label class=\"form-check-label\" for=\"exampleRadios3\">\n    Admin\n  </label>\n</div>\n\n<br />\n    <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n</form>\n\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/templates/sign_up.html b/website/templates/sign_up.html
--- a/website/templates/sign_up.html	
+++ b/website/templates/sign_up.html	
@@ -14,6 +14,10 @@
         <input type="text" class="form-control" id="firstName" name="firstName" placeholder="Enter first name" />
     </div>
     <div class="form-group">
+        <label for="lastName">Last Name</label>
+        <input type="text" class="form-control" id="lastName" name="lastName" placeholder="Enter last name" />
+    </div>
+    <div class="form-group">
         <label for="password1">Password</label>
         <input type="password" class="form-control" id="password1" name="password1" placeholder="Enter password" />
     </div>
@@ -25,20 +29,20 @@
 
 <h3 style="text-align:center;">Are you a tutee, tutor, or admin?</h3>
 <div class="form-check">
-  <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios1" value="option1" checked>
-  <label class="form-check-label" for="exampleRadios1">
+  <input class="form-check-input" type="radio" name="role" id="tutee" value="tutee" checked>
+  <label class="form-check-label" for="tutee">
     Tutee
   </label>
 </div>
 <div class="form-check">
-  <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios2" value="option2">
-  <label class="form-check-label" for="exampleRadios2">
+  <input class="form-check-input" type="radio" name="role" id="tutor" value="tutor">
+  <label class="form-check-label" for="tutor">
     Tutor
   </label>
 </div>
 <div class="form-check">
-  <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios3" value="option3">
-  <label class="form-check-label" for="exampleRadios3">
+  <input class="form-check-input" type="radio" name="role" id="admin" value="admin">
+  <label class="form-check-label" for="admin">
     Admin
   </label>
 </div>
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from website import create_app\n\napp = create_app()\n\n# entry point to app\nif __name__ == '__main__':\n    app.run(debug=True)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	
+++ b/main.py	
@@ -1,7 +1,8 @@
+
 from website import create_app
 
 app = create_app()
 
 # entry point to app
 if __name__ == '__main__':
-    app.run(debug=True)
+    app.run(debug=True)
\ No newline at end of file
Index: website/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from . import db\nfrom flask_login import UserMixin\nfrom sqlalchemy.sql import func\n\nclass Note(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    data = db.Column(db.String(10000))\n    date = db.Column(db.DateTime(timezone=True), default=func.now())\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n\n\nclass User(db.Model, UserMixin):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(50), unique=True)\n    password = db.Column(db.String(50))\n    first_name = db.Column(db.String(50))\n    notes = db.relationship('Note')\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/models.py b/website/models.py
--- a/website/models.py	
+++ b/website/models.py	
@@ -14,5 +14,6 @@
     email = db.Column(db.String(50), unique=True)
     password = db.Column(db.String(50))
     first_name = db.Column(db.String(50))
+    last_name = db.Column(db.String(50))
+    role = db.Column(db.String(50))
     notes = db.relationship('Note')
-
Index: website/auth.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Blueprint, render_template, request, flash, redirect, url_for\nfrom .models import User\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom.import db\nfrom flask_login import login_user, login_required, logout_user, current_user\n\n# hi there\n\nauth = Blueprint('auth', __name__)\n\n@auth.route('/login', methods=['GET','POST'])\ndef login():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        password = request.form.get('password')\n\n        user = User.query.filter_by(email=email).first()\n        if user:\n            if check_password_hash(user.password, password):\n                # print(user.first_name)\n                flash(user.first_name + ' is logged in successfully!', category='success')\n                login_user(user, remember=True)\n                return redirect(url_for('views.home'))\n            else:\n                flash('Incorrect password, try again.', category='error')\n        else:\n            flash('Email does not exist.', category='error')\n\n    return render_template(\"login.html\",user=current_user)\n# hello\n\n@auth.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    return redirect(url_for('auth.login'))\n\n@auth.route('/sign-up', methods=['GET','POST'])\ndef sign_up():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        first_name = request.form.get('firstName')\n        password1 = request.form.get('password1')\n        password2 = request.form.get('password2')\n\n        user = User.query.filter_by(email=email).first()\n        if user:\n            flash('Email already exists.', category='error')\n        elif len(email) < 5:\n            flash('Email must be greater than 5 characters.', category='error')\n        elif len(first_name) < 2:\n            flash('First name must be greater than 1 character', category='error')\n        elif password1 != password2:\n            flash('Passwords don\\'t match.', category='error')\n        elif len(password1) < 7:\n            flash('Password must be at least 7 characters', category='error')\n        else:\n            # add user to database\n            new_user = User(email=email, first_name=first_name, password=generate_password_hash(password1,method='sha256'))\n            db.session.add(new_user)\n            db.session.commit()\n            login_user(new_user, remember=True)\n            flash ('Account created!', category='success')\n            return redirect(url_for('views.home'))\n\n    return render_template(\"sign_up.html\", user=current_user)\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/auth.py b/website/auth.py
--- a/website/auth.py	
+++ b/website/auth.py	
@@ -40,9 +40,10 @@
     if request.method == 'POST':
         email = request.form.get('email')
         first_name = request.form.get('firstName')
+        last_name = request.form.get('lastName')
         password1 = request.form.get('password1')
         password2 = request.form.get('password2')
-
+        role = request.form.get('role')
         user = User.query.filter_by(email=email).first()
         if user:
             flash('Email already exists.', category='error')
@@ -50,13 +51,16 @@
             flash('Email must be greater than 5 characters.', category='error')
         elif len(first_name) < 2:
             flash('First name must be greater than 1 character', category='error')
+        elif len(last_name) < 2:
+            flash('Last name must be greater than 1 character', category='error')
         elif password1 != password2:
             flash('Passwords don\'t match.', category='error')
         elif len(password1) < 7:
             flash('Password must be at least 7 characters', category='error')
         else:
             # add user to database
-            new_user = User(email=email, first_name=first_name, password=generate_password_hash(password1,method='sha256'))
+
+            new_user = User(email=email, first_name=first_name, last_name=last_name, password=generate_password_hash(password1,method='sha256'), role=role)
             db.session.add(new_user)
             db.session.commit()
             login_user(new_user, remember=True)
